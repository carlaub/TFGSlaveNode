package util;

import model.SNInformation;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created by Carla Urrea BlÃ¡zquez on 04/05/2018.
 *
 * This class is a parser for the config file of the MetadataManager
 *
 * The config file format:
 *	-> MetadataManager IP
 */
public class ParserConf {
	private BufferedReader brConfigFile;

	public ParserConf() {
		try {
			brConfigFile = new BufferedReader(new FileReader(System.getProperty("user.dir") + "/src/main/resources/files/SlaveNode.conf"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public SNInformation getConfiguration() throws IOException {
		SNInformation snInformation = new SNInformation();

		// Read MetadataManager's IP
		snInformation.setMMIp(brConfigFile.readLine());

		// Read MetadataManager's connection port
		snInformation.setMMPort(Integer.valueOf(brConfigFile.readLine()));

		// Read defaul HDFS FS
		snInformation.setDefaultFS(brConfigFile.readLine());

		// Read HDFS main directory. Partitions files (nodes & edges) will be located in this directory, after having been generated by MM
		snInformation.setHDFSWorkingDirectory(brConfigFile.readLine());

		// Read Neo4j database path
		snInformation.setNeo4jDBPath(brConfigFile.readLine());

		printConfigurationInformation(snInformation);

		return snInformation;
	}

	private void printConfigurationInformation(SNInformation snInformation) {
		System.out.println("MetadataManager IP: " + snInformation.getMMIp());
		System.out.println("FS default: " + snInformation.getDefaultFS());
		System.out.println("Working directory: " + snInformation.getHDFSWorkingDirectory());
	}
}
